version: '3.9'

services:

  db:
    image: postgres:13.0-alpine
    restart: on-failure
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pg_data_todolist:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 3s
      timeout: 3s
      retries: 5
    networks:
      - backend_nw


  api:
    image: ${DOCKER_USERNAME}/homework38:latest
    restart: always
    env_file:
      - ./.env
    environment:
      POSTGRES_HOST: db
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend_nw
      - frontend_nw

  bot:
    image: ${DOCKER_USERNAME}/homework38:latest
    restart: always
    env_file:
      - ./.env
    environment:
      POSTGRES_HOST: db
    depends_on:
      db:
        condition: service_healthy
    command: python3 manage.py runbot
    networks:
      - backend_nw

  frontend:
    image: sermalenk/skypro-front:lesson-38
    restart: always
    depends_on:
      - api
    ports:
      - "80:80"

    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - frontend_nw

volumes:
  pg_data_todolist:
networks:
  backend_nw:
    driver: bridge
  frontend_nw:
    driver: bridge
